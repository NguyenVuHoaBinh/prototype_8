name: LLM Workflow System CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run tests
        run: mvn -B test

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 5

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build
    if: false  # Temporarily disable this job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.projectName="${{ github.repository }}" \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}

      - name: Run Checkstyle
        run: mvn -B checkstyle:check

      - name: Run PMD
        run: mvn -B pmd:check

      - name: Run SpotBugs
        run: mvn -B spotbugs:check

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: your-org/llm-workflow-system
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=your-org/llm-workflow-system:buildcache
          cache-to: type=registry,ref=your-org/llm-workflow-system:buildcache,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: development
      url: https://dev.llm-workflow-system.example.com
    steps:
      - name: Deploy to Dev Environment
        run: |
          echo "Deploying to Development Environment"
          # Add your deployment script here
          # For example, using kubectl to deploy to a Kubernetes cluster
          # kubectl config use-context dev-cluster
          # kubectl apply -f k8s/dev/

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test'
    environment:
      name: test
      url: https://test.llm-workflow-system.example.com
    steps:
      - name: Deploy to Test Environment
        run: |
          echo "Deploying to Test Environment"
          # Add your deployment script here
          # For example, using kubectl to deploy to a Kubernetes cluster
          # kubectl config use-context test-cluster
          # kubectl apply -f k8s/test/

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment:
      name: production
      url: https://llm-workflow-system.example.com
    steps:
      - name: Deploy to Production Environment
        run: |
          echo "Deploying to Production Environment"
          # Add your deployment script here
          # For example, using kubectl to deploy to a Kubernetes cluster
          # kubectl config use-context prod-cluster
          # kubectl apply -f k8s/prod/